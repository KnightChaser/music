---
layout: "base.njk"
---
<style>
  /* Import Archivo font */
  @import url('https://fonts.googleapis.com/css2?family=Archivo:wght@400;700&display=swap');

  body {
    font-family: 'Archivo', sans-serif;
  }
  h1.site-title {
    text-align: center;
    margin-top: 1rem;
    font-size: 2rem;
    font-weight: 700;
  }

  .count-container {
    text-align: center;
    margin-bottom: 0.5rem;
    font-size: 1rem;
    color: #555;
  }

  .search-container {
    text-align: center;
    margin: 1.5rem 0;
  }
  .search-container input {
    width: 60%;
    max-width: 500px;
    padding: 0.6rem;
    font-size: 1rem;
    border: 1px solid #888;
    border-radius: 4px;
  }

  table#resultsTable {
    margin: 0 auto;
    border-collapse: collapse;
    width: 80%;
    max-width: 800px;
    font-family: 'Archivo', sans-serif;
  }
  table#resultsTable th,
  table#resultsTable td {
    border: 1px solid #ccc;
    padding: 0.5rem 0.5rem;
  }
  table#resultsTable th {
    background: #f4f4f4;
    cursor: pointer;
  }
  /* center-align first three columns */
  table#resultsTable th:nth-child(-n+3),
  table#resultsTable td:nth-child(-n+3) {
    text-align: center;
  }

  .sort-indicator {
    font-size: 0.8rem;
    margin-left: 0.25rem;
    user-select: none;
  }

  .clickable {
    cursor: pointer;
    color: #0066cc;
    text-decoration: underline;
  }
</style>

<h1 class="site-title">KnightChaser's Music Curation List</h1>
<div class="count-container" id="count">0 / 0 songs shown</div>

<div class="search-container">
  <input id="search" placeholder="Search by artist, title, mood, tag…" />
</div>

<table id="resultsTable">
  <thead>
    <tr>
      <th class="sortable" data-key="artist">
        Artist <span class="sort-indicator">⇅</span>
      </th>
      <th class="sortable" data-key="title">
        Title <span class="sort-indicator">⇅</span>
      </th>
      <th class="sortable" data-key="release">
        Release <span class="sort-indicator">⇅</span>
      </th>
      <th>Mood</th>
      <th>Tags</th>
    </tr>
  </thead>
  <tbody>
    <tr><td colspan="5" style="text-align:center;">Loading…</td></tr>
  </tbody>
</table>

<script src="https://cdn.jsdelivr.net/npm/fuse.js@6"></script>
<script>
  function escapeRegex(s) {
    return s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }
  function highlight(text, term) {
    if (!term) return text;
    const re = new RegExp('(' + escapeRegex(term) + ')', 'gi');
    return text.replace(re, '<strong>$1</strong>');
  }

  fetch('{{ "/search.json" | url }}')
    .then(r => r.json())
    .then(data => {
      const total = data.length;
      const fuse = new Fuse(data, {
        keys: ['artist','title','mood','tags'],
        threshold: 0.3
      });

      const input       = document.getElementById('search');
      const tbody       = document.querySelector('#resultsTable tbody');
      const countEl     = document.getElementById('count');
      let currentResults = [];
      let sortKey       = null, sortDir = 1;

      // initial show up to 100
      function init() {
        currentResults = data.slice(0, 100);
        updateCount();
        render('');
      }

      function updateCount() {
        countEl.textContent = `${currentResults.length} / ${total} songs shown`;
      }

      function applySort() {
        if (!sortKey) return;
        currentResults.sort((a, b) => {
          let av = a[sortKey], bv = b[sortKey];
          if (sortKey === 'release') {
            av = new Date(av); bv = new Date(bv);
          } else {
            av = String(av).toLowerCase();
            bv = String(bv).toLowerCase();
          }
          if (av < bv) return -1 * sortDir;
          if (av > bv) return 1 * sortDir;
          return 0;
        });
      }

      function render(term) {
        if (!currentResults.length) {
          tbody.innerHTML = `<tr><td colspan="5" style="text-align:center;">No matches</td></tr>`;
          return;
        }
        tbody.innerHTML = currentResults.map(item => {
          const t = term.trim();
          const moods = (item.mood || []).map(m =>
            `<span class="clickable">#${highlight(m, t)}</span>`
          ).join(' ');
          const tags = (item.tags || []).map(tag =>
            `<span class="clickable">#${highlight(tag, t)}</span>`
          ).join(' ');
          return `
            <tr>
              <td><span class="clickable">${highlight(item.artist, t)}</span></td>
              <td>${highlight(item.title, t)}</td>
              <td>${highlight(item.release, t)}</td>
              <td>${moods}</td>
              <td>${tags}</td>
            </tr>`;
        }).join('');
        updateCount();
      }

      function doSearch(term) {
        if (term) {
          currentResults = fuse.search(term).map(r => r.item).slice(0, 100);
        } else {
          currentResults = data.slice(0, 100);
        }
        applySort();
        render(term);
      }

      document.querySelectorAll('th.sortable').forEach(th => {
        th.addEventListener('click', () => {
          const key = th.dataset.key;
          if (sortKey === key) sortDir = -sortDir;
          else { sortKey = key; sortDir = 1; }
          applySort();
          render(input.value);
        });
      });

      tbody.addEventListener('click', e => {
        if (e.target.classList.contains('clickable')) {
          const term = e.target.innerText;
          if (!input.value.includes(term)) {
            input.value = input.value ? input.value + ' ' + term : term;
            doSearch(input.value);
          }
        }
      });

      input.addEventListener('input', e => {
        doSearch(e.target.value);
      });

      init();
    });
</script>
