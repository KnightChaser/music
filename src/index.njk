---
layout: "base.njk"
---
<style>
  /* Import Archivo font */
  @import url('https://fonts.googleapis.com/css2?family=Archivo:wght@400;700&display=swap');

  body { font-family: 'Archivo', sans-serif; }
  h1.site-title { text-align: center; margin-top: 1rem; font-size: 2rem; font-weight: 700; }

  .count-container { text-align: center; margin-bottom: 0.5rem; font-size: 1rem; color: #555; }

  .search-container { position: relative; text-align: center; margin: 1.5rem 0; }
  .search-container input {
    width: 60%; max-width: 500px; padding: 0.6rem; font-size: 1rem;
    font-family: 'Archivo', sans-serif; border: 1px solid #888; border-radius: 4px;
  }
  .search-container button {
    margin-left: 0.5rem; padding: 0.6rem 1rem; font-size: 1rem;
    font-family: 'Archivo', sans-serif; border: 1px solid #888; border-radius: 4px;
    background: #f4f4f4; cursor: pointer;
  }
  .search-container button:hover { background: #e0e0e0; }

  .suggestions {
    position: absolute; top: 100%; left: 50%; transform: translateX(-50%);
    width: 60%; max-width: 500px; background: white; border: 1px solid #ccc;
    border-top: none; z-index: 100; text-align: left; font-family: 'Archivo', sans-serif;
    font-size: 0.9rem; max-height: 200px; overflow-y: auto; box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    display: none;
  }
  .suggestions div { padding: 0.5rem; cursor: pointer; }
  .suggestions div:hover, .suggestions .selected { background: #f0f0f0; }

  table#resultsTable {
    margin: 0 auto; border-collapse: collapse; width: 75%; font-family: 'Archivo', sans-serif;
  }
  table#resultsTable th, table#resultsTable td {
    border: 1px solid #ccc; padding: 0.5rem;
  }
  table#resultsTable th { background: #f4f4f4; cursor: pointer; }
  table#resultsTable th:nth-child(-n+3), table#resultsTable td:nth-child(-n+3),
  table#resultsTable th[data-key="language"], table#resultsTable td:nth-last-child(1) {
    text-align: center;
  }

  .sort-indicator { font-size: 0.8rem; margin-left: 0.25rem; user-select: none; }

  .clickable {
    display: inline-block; background-color: #fdecea; color: #b71c1c;
    font-weight: 700; border-radius: 0.25rem; padding: 0.2rem 0.5rem;
    margin: 0.1rem; text-decoration: none;
  }
  .clickable:hover { background-color: #f9d6d5; }

  #backToTop {
    position: fixed; right: 1rem; bottom: 1rem; display: none;
    background: #b71c1c; color: white; border: none; border-radius: 50%;
    width: 3rem; height: 3rem; font-size: 1.5rem; cursor: pointer;
    box-shadow: 0 2px 6px rgba(0,0,0,0.3);
  }
</style>

<h1 class="site-title">KnightChaser's Music Curation List</h1>
<a href="https://github.com/KnightChaser/music" target="_blank" style="position:absolute; top:1rem; right:1rem;">
  <img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="GitHub" width="32" height="32" title="Music Repo on GitHub">
</a>
<div class="count-container" id="count">0 / 0 songs shown</div>

<div class="search-container">
  <input id="search" placeholder="artist:..., tag:..., note:..., language:..." autocomplete="off" />
  <button id="clear">Clear Query</button>
  <div class="suggestions" id="suggestions"></div>
</div>

<table id="resultsTable">
  <thead>
    <tr>
      <th class="sortable" data-key="artist">Artist <span class="sort-indicator">â‡…</span></th>
      <th class="sortable" data-key="title">Title <span class="sort-indicator">â‡…</span></th>
      <th class="sortable" data-key="release">Release <span class="sort-indicator">â‡…</span></th>
      <th class="sortable" data-key="tags">Tags <span class="sort-indicator">â‡…</span></th>
      <th>Note</th>
      <th class="sortable" data-key="language">Language <span class="sort-indicator">â‡…</span></th>
    </tr>
  </thead>
  <tbody>
    <tr><td colspan="6" style="text-align:center;">Loadingâ€¦</td></tr>
  </tbody>
</table>

<button id="backToTop" title="Top">â†‘</button>

<script>
  const langEmoji = { en:'ðŸ‡ºðŸ‡¸', pt:'ðŸ‡§ðŸ‡·', ja:'ðŸ‡¯ðŸ‡µ', es:'ðŸ‡ªðŸ‡¸', fr:'ðŸ‡«ðŸ‡·' };

  function parseCriteria(str) {
    return str.split(',').map(s=>s.trim()).filter(s=>s.includes(':')).reduce((a,p)=>{const [k,...r]=p.split(':');const key=k.trim().toLowerCase();const val=r.join(':').trim().toLowerCase();if(key&&val)a[key]=val;return a;},{});
  }
  function filterData(data, criteria) {
    return data.filter(item=>Object.entries(criteria).every(([k,v])=>{
      switch(k){
        case 'artist': return item.artist.toLowerCase().includes(v);
        case 'title': return item.title.toLowerCase().includes(v);
        case 'release': return item.release.toLowerCase().includes(v);
        case 'tags': return item.tags.some(t=>t.toLowerCase().includes(v));
        case 'note': return (item.note||'').toLowerCase().includes(v);
        case 'language': return item.language && item.language.toLowerCase()===v;
        default: return false;
      }
    }));
  }

  fetch('{{ "/search.json" | url }}').then(r=>r.json()).then(data=>{
    const total=data.length;
    const input=document.getElementById('search');
    const clearBtn=document.getElementById('clear');
    const suggestionsBox=document.getElementById('suggestions');
    const tbody=document.querySelector('#resultsTable tbody');
    const countEl=document.getElementById('count');

    const sources={
      artist: Array.from(new Set(data.map(d=>d.artist))).sort(),
      title: Array.from(new Set(data.map(d=>d.title))).sort(),
      tags: Array.from(new Set(data.flatMap(d=>d.tags))).sort(),
      language: Array.from(new Set(data.map(d=>d.language).filter(l=>l))).sort(),
      note: Array.from(new Set(data.map(d=>d.note).filter(n=>n))).sort()
    };
    const tagCounts=data.flatMap(d=>d.tags).reduce((a,t)=>(a[t]=(a[t]||0)+1,a),{});

    let current=[]; let sortKey='release', sortDir=-1;
    let selectedIndex=-1;

    function updateCount(){countEl.textContent=`${current.length} / ${total} songs shown`;}
    function applySort(){current.sort((a,b)=>{let av=a[sortKey],bv=b[sortKey];if(sortKey==='release'){av=new Date(av);bv=new Date(bv);}else{av=String(av).toLowerCase();bv=String(bv).toLowerCase();}return(av<bv?-1:av>bv?1:0)*sortDir;});}

    function render(){
      if(!current.length){tbody.innerHTML='<tr><td colspan="6" style="text-align:center;">No matches</td></tr>';updateCount();return;}
      tbody.innerHTML=current.map(item=>{
        const tagsHtml=item.tags.slice().sort().map(t=>
          `<span class="clickable" data-field="tags" data-term="${t}">#${t} (${tagCounts[t]})</span>`
        ).join(' ');
        return `<tr>
          <td><span class="clickable" data-field="artist" data-term="${item.artist}">${item.artist}</span></td>
          <td>${item.title}</td>
          <td style="white-space: nowrap;">${item.release}</td>
          <td>${tagsHtml}</td>
          <td>${item.note||'N/A'}</td>
          <td>${item.language?`<span class="clickable" data-field="language" data-term="${item.language}">${item.language}${langEmoji[item.language]||''}</span>`:''}</td>
        </tr>`;
      }).join('');updateCount();
    }

    function doSearch(){const crit=parseCriteria(input.value);current=Object.keys(crit).length?filterData(data,crit):data.slice().sort((a,b)=>new Date(b.release)-new Date(a.release));applySort();render();}

    function updateSuggestions(){
      // get last segment after comma
      const raw=input.value;
      const lastSeg=raw.includes(',')? raw.slice(raw.lastIndexOf(',')+1).trim() : raw.trim();
      const m=lastSeg.match(/^(\w+):\s*([^,]*)$/);
      if(m){
        const field=m[1].toLowerCase();
        const term=m[2].toLowerCase();
        const list=sources[field];
        if(list){
          const matches=list.filter(v=>v.toLowerCase().startsWith(term)).slice(0,10);
          if(matches.length){
            suggestionsBox.innerHTML=matches.map((v,i)=>{
              const bold=`<strong>${field}: ${v.substring(0,term.length)}</strong>`;
              return `<div data-val="${field}:${v}" data-index="${i}">${bold+v.substring(term.length)}</div>`;
            }).join('');
            selectedIndex=-1;
            suggestionsBox.style.display='block';
            return;
          }
        }
      }
      suggestionsBox.style.display='none';
    }

    // event bindings
    doSearch();
    input.addEventListener('input',()=>{doSearch();updateSuggestions();});
    input.addEventListener('keydown',e=>{
      const items=suggestionsBox.querySelectorAll('div');
      if(items.length && suggestionsBox.style.display==='block'){
        if(e.key==='ArrowDown'){ e.preventDefault(); selectedIndex=(selectedIndex+1)%items.length; }
        else if(e.key==='ArrowUp'){ e.preventDefault(); selectedIndex=(selectedIndex-1+items.length)%items.length; }
        else if(e.key==='Enter' && selectedIndex>-1){ e.preventDefault(); items[selectedIndex].click(); return; }
        else return;
        items.forEach(i=>i.classList.remove('selected'));
        items[selectedIndex].classList.add('selected');
        items[selectedIndex].scrollIntoView({block:'nearest'});
      }
    });
    clearBtn.addEventListener('click',()=>{input.value='';doSearch();suggestionsBox.style.display='none';input.focus();});
    suggestionsBox.addEventListener('click',e=>{if(e.target.dataset.val){
      // replace last segment
      const before = input.value.includes(',')? input.value.slice(0,input.value.lastIndexOf(',')+1) : '';
      input.value = before + ' ' + e.target.dataset.val;
      doSearch();
      suggestionsBox.style.display='none';
    }});

    document.querySelectorAll('th.sortable').forEach(th=>th.addEventListener('click',()=>{const key=th.dataset.key;if(sortKey===key)sortDir*=-1;else{sortKey=key;sortDir=1;}document.querySelectorAll('th.sortable').forEach(h=>h.style.fontWeight='normal');th.style.fontWeight='bold';applySort();render();}));
    document.querySelector('#resultsTable tbody').addEventListener('click',e=>{if(e.target.classList.contains('clickable')){const f=e.target.dataset.field,t=e.target.dataset.term;const parts=input.value.split(',').map(s=>s.trim()).filter(s=>s);const filtered=parts.filter(p=>!p.toLowerCase().startsWith(f+':'));filtered.push(`${f}:${t}`);input.value=filtered.join(', ');doSearch();}});

    const btn=document.getElementById('backToTop');
    window.addEventListener('scroll',()=>{btn.style.display=window.scrollY>300?'block':'none';});
    btn.addEventListener('click',()=>window.scrollTo({top:0,behavior:'smooth'}));
  });
</script>
