---
layout: "base.njk"
---
<style>
  /* Import Archivo font */
  @import url('https://fonts.googleapis.com/css2?family=Archivo:wght@400;700&display=swap');

  body {
    font-family: 'Archivo', sans-serif;
  }
  h1.site-title {
    text-align: center;
    margin-top: 1rem;
    font-size: 2rem;
    font-weight: 700;
  }

  .count-container {
    text-align: center;
    margin-bottom: 0.5rem;
    font-size: 1rem;
    color: #555;
  }

  .search-container {
    text-align: center;
    margin: 1.5rem 0;
  }
  .search-container input {
    width: 60%;
    max-width: 500px;
    padding: 0.6rem;
    font-size: 1rem;
    font-family: 'Archivo', sans-serif;
    border: 1px solid #888;
    border-radius: 4px;
  }
  .search-container button {
    margin-left: 0.5rem;
    padding: 0.6rem 1rem;
    font-size: 1rem;
    font-family: 'Archivo', sans-serif;
    border: 1px solid #888;
    border-radius: 4px;
    background: #f4f4f4;
    cursor: pointer;
  }
  .search-container button:hover {
    background: #e0e0e0;
  }

  table#resultsTable {
    margin: 0 auto;
    border-collapse: collapse;
    /* widen to about 3/4 screen */
    width: 75%;
    font-family: 'Archivo', sans-serif;
  }
  table#resultsTable th,
  table#resultsTable td {
    border: 1px solid #ccc;
    padding: 0.5rem;
  }
  table#resultsTable th {
    background: #f4f4f4;
    cursor: pointer;
  }
  /* center-align Artist, Title, Release, Language columns */
  table#resultsTable th:nth-child(-n+3),
  table#resultsTable td:nth-child(-n+3),
  table#resultsTable th[data-key="language"],
  table#resultsTable td:nth-last-child(1) {
    text-align: center;
  }

  .sort-indicator {
    font-size: 0.8rem;
    margin-left: 0.25rem;
    user-select: none;
  }

  /* Badge style for clickable filters */
  .clickable {
    display: inline-block;
    background-color: #fdecea;
    color: #b71c1c;
    font-weight: 700;
    border-radius: 0.25rem;
    padding: 0.2rem 0.5rem;
    margin: 0.1rem;
    text-decoration: none;
  }
  .clickable:hover {
    background-color: #f9d6d5;
  }
</style>

<h1 class="site-title">KnightChaserâ€™s Music Curation List</h1>
<!-- GitHub link -->
<a href="https://github.com/KnightChaser/music" target="_blank" style="position:absolute; top:1rem; right:1rem;">
  <img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="GitHub" width="32" height="32" title="Music Repo on GitHub">
</a>
<div class="count-container" id="count">0 / 0 songs shown</div>

<div class="search-container">
  <!-- User enters key:value pairs, comma-separated -->
  <input id="search" placeholder="Artist:..., Mood:..., Tag:..., Note:..., Language:..." />
  <button id="clear">Clear Query</button>
</div>

<table id="resultsTable">
  <thead>
    <tr>
      <!-- Clickable headers for sorting -->
      <th class="sortable" data-key="artist">
        Artist <span class="sort-indicator">â‡…</span>
      </th>
      <th class="sortable" data-key="title">
        Title <span class="sort-indicator">â‡…</span>
      </th>
      <th class="sortable" data-key="release">
        Release <span class="sort-indicator">â‡…</span>
      </th>
      <th>Mood</th>
      <th>Tags</th>
      <th>Note</th>
      <th class="sortable" data-key="language">
        Language <span class="sort-indicator">â‡…</span>
      </th>
    </tr>
  </thead>
  <tbody>
    <!-- Initial loading state -->
    <tr><td colspan="7" style="text-align:center;">Loadingâ€¦</td></tr>
  </tbody>
</table>

<script>
  // Map language codes to emoji flags
  const langEmoji = {
    en: 'ðŸ‡ºðŸ‡¸',
    pt: 'ðŸ‡§ðŸ‡·',
    ja: 'ðŸ‡¯ðŸ‡µ',
    es: 'ðŸ‡ªðŸ‡¸',
    fr: 'ðŸ‡«ðŸ‡·'
  };

  /**
   * Parse input string into criteria object.
   * e.g. "Artist:Avril, Language:en" â†’ { artist: 'avril', language: 'en' }
   */
  function parseCriteria(str) {
    return str.split(',')
      .map(s => s.trim())
      .filter(s => s.includes(':'))
      .reduce((acc, pair) => {
        const [rawKey, ...rest] = pair.split(':');
        const key = rawKey.trim().toLowerCase();
        const val = rest.join(':').trim().toLowerCase();
        if (key && val) acc[key] = val;
        return acc;
      }, {});
  }

  /**
   * Filter songs by AND-ing all criteria fields.
   */
  function filterData(data, criteria) {
    return data.filter(item => {
      return Object.entries(criteria).every(([key, val]) => {
        switch(key) {
          case 'artist':   return item.artist.toLowerCase().includes(val);
          case 'title':    return item.title.toLowerCase().includes(val);
          case 'release':  return item.release.toLowerCase().includes(val);
          case 'mood':     return item.mood.some(m => m.toLowerCase().includes(val));
          case 'tags':     return item.tags.some(t => t.toLowerCase().includes(val));
          case 'note':     return (item.note||'').toLowerCase().includes(val);
          case 'language': return item.language && item.language.toLowerCase() === val;
          default:         return false;
        }
      });
    });
  }

  // Fetch static JSON index
  fetch('{{ "/search.json" | url }}')
    .then(res => res.json())
    .then(data => {
      const total = data.length;
      const input = document.getElementById('search');
      const clearBtn = document.getElementById('clear');
      const tbody = document.querySelector('#resultsTable tbody');
      const countEl = document.getElementById('count');
      let current = [];
      let sortKey = null, sortDir = 1;

      // Update the count badge above table
      function updateCount() {
        countEl.textContent = `${current.length} / ${total} songs shown`;
      }

      // Sort the current array by sortKey & sortDir
      function applySort() {
        if (!sortKey) return;
        current.sort((a, b) => {
          let av = a[sortKey], bv = b[sortKey];
          if (sortKey === 'release') {
            av = new Date(av); bv = new Date(bv);
          } else {
            av = String(av).toLowerCase();
            bv = String(bv).toLowerCase();
          }
          return (av < bv ? -1 : av > bv ? 1 : 0) * sortDir;
        });
      }

      // Render table rows from current array
      function render() {
        if (current.length === 0) {
          tbody.innerHTML = `<tr><td colspan="7" style="text-align:center;">No matches</td></tr>`;
          updateCount();
          return;
        }
        tbody.innerHTML = current.map(item => {
          // Build clickable badges with data-field and data-term
          const langCode = item.language || '';
          const emoji = langEmoji[langCode] || '';
          const langBadge = langCode
            ? `<span class="clickable" data-field="language" data-term="${langCode}">${langCode}${emoji}</span>`
            : '';
          const moods = item.mood.map(m =>
            `<span class="clickable" data-field="mood" data-term="${m}">#${m}</span>`
          ).join(' ');
          const tags = item.tags.map(t =>
            `<span class="clickable" data-field="tags" data-term="${t}">#${t}</span>`
          ).join(' ');
          const note = item.note || 'N/A';

          return `
            <tr>
              <td><span class="clickable" data-field="artist" data-term="${item.artist}">${item.artist}</span></td>
              <td>${item.title}</td>
              <td>${item.release}</td>
              <td>${moods}</td>
              <td>${tags}</td>
              <td>${note}</td>
              <td>${langBadge}</td>
            </tr>`;
        }).join('');
        updateCount();
      }

      // Perform search and filtering based on criteria
      function doSearch() {
        const criteria = parseCriteria(input.value);
        current = Object.keys(criteria).length
          ? filterData(data, criteria)
          : data.slice(0, 100);  // show first 100 if no filter
        applySort();
        render();
      }

      // Initial load
      doSearch();

      // User typing triggers filter
      input.addEventListener('input', doSearch);

      // Clear button resets input and refilters
      clearBtn.addEventListener('click', () => {
        input.value = '';
        doSearch();
        input.focus();
      });

      // Clicking headers toggles sort
      document.querySelectorAll('th.sortable').forEach(th => {
        th.addEventListener('click', () => {
          const key = th.dataset.key;
          if (sortKey === key) sortDir = -sortDir;
          else { sortKey = key; sortDir = 1; }
          applySort();
          render();
        });
      });

      // Clicking badges adds/replaces criteria and re-filters
      tbody.addEventListener('click', e => {
        if (e.target.classList.contains('clickable')) {
          const field = e.target.dataset.field;
          const term  = e.target.dataset.term;
          const part = `${field}:${term}`;
          const parts = input.value.split(',').map(s => s.trim()).filter(s => s);
          // Replace same-field part
          const filtered = parts.filter(p => !p.toLowerCase().startsWith(field + ':'));
          filtered.push(part);
          input.value = filtered.join(', ');
          doSearch();
        }
      });
    });
</script>
