---
layout: "base.njk"
---
<style>
  /* Import Archivo font */
  @import url('https://fonts.googleapis.com/css2?family=Archivo:wght@400;700&display=swap');

  body {
    font-family: 'Archivo', sans-serif;
  }
  h1.site-title {
    text-align: center;
    margin-top: 1rem;
    font-size: 2rem;
    font-weight: 700;
  }

  .count-container {
    text-align: center;
    margin-bottom: 0.5rem;
    font-size: 1rem;
    color: #555;
  }

  .search-container {
    text-align: center;
    margin: 1.5rem 0;
  }
  .search-container input {
    width: 60%;
    max-width: 500px;
    padding: 0.6rem;
    font-size: 1rem;
    font-family: 'Archivo', sans-serif;
    border: 1px solid #888;
    border-radius: 4px;
  }
  .search-container button {
    margin-left: 0.5rem;
    padding: 0.6rem 1rem;
    font-size: 1rem;
    font-family: 'Archivo', sans-serif;
    border: 1px solid #888;
    border-radius: 4px;
    background: #f4f4f4;
    cursor: pointer;
  }
  .search-container button:hover {
    background: #e0e0e0;
  }

  table#resultsTable {
    margin: 0 auto;
    border-collapse: collapse;
    width: 75%;
    font-family: 'Archivo', sans-serif;
  }
  table#resultsTable th,
  table#resultsTable td {
    border: 1px solid #ccc;
    padding: 0.5rem;
  }
  table#resultsTable th {
    background: #f4f4f4;
    cursor: pointer;
  }
  /* center-align Artist, Title, Release, Language columns */
  table#resultsTable th:nth-child(-n+3),
  table#resultsTable td:nth-child(-n+3),
  table#resultsTable th[data-key="language"],
  table#resultsTable td:nth-last-child(1) {
    text-align: center;
  }

  .sort-indicator {
    font-size: 0.8rem;
    margin-left: 0.25rem;
    user-select: none;
  }

  /* Badge style for clickable filters */
  .clickable {
    display: inline-block;
    background-color: #fdecea;
    color: #b71c1c;
    font-weight: 700;
    border-radius: 0.25rem;
    padding: 0.2rem 0.5rem;
    margin: 0.1rem;
    text-decoration: none;
  }
  .clickable:hover {
    background-color: #f9d6d5;
  }

  /* Back-to-top button */
  #backToTop {
    position: fixed;
    right: 1rem;
    bottom: 1rem;
    display: none;
    background: #b71c1c;
    color: white;
    border: none;
    border-radius: 50%;
    width: 3rem;
    height: 3rem;
    font-size: 1.5rem;
    cursor: pointer;
    box-shadow: 0 2px 6px rgba(0,0,0,0.3);
  }
</style>

<h1 class="site-title">KnightChaserâ€™s Music Curation List</h1>
<!-- GitHub link -->
<a href="https://github.com/KnightChaser/music" target="_blank" style="position:absolute; top:1rem; right:1rem;">
  <img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="GitHub" width="32" height="32" title="Music Repo on GitHub">
</a>
<div class="count-container" id="count">0 / 0 songs shown</div>

<div class="search-container">
  <input id="search" placeholder="artist:..., tag:..., note:..., language:..." />
  <button id="clear">Clear Query</button>
</div>

<table id="resultsTable">
  <thead>
    <tr>
      <th class="sortable" data-key="artist">Artist <span class="sort-indicator">â‡…</span></th>
      <th class="sortable" data-key="title">Title <span class="sort-indicator">â‡…</span></th>
      <th class="sortable" data-key="release">Release <span class="sort-indicator">â‡…</span></th>
      <th class="sortable" data-key="tags">Tags <span class="sort-indicator">â‡…</span></th>
      <th>Note</th>
      <th class="sortable" data-key="language">Language <span class="sort-indicator">â‡…</span></th>
    </tr>
  </thead>
  <tbody>
    <tr><td colspan="6" style="text-align:center;">Loadingâ€¦</td></tr>
  </tbody>
</table>

<button id="backToTop" title="Top">â†‘</button>

<script>
  const langEmoji = { en:'ðŸ‡ºðŸ‡¸', pt:'ðŸ‡§ðŸ‡·', ja:'ðŸ‡¯ðŸ‡µ', es:'ðŸ‡ªðŸ‡¸', fr:'ðŸ‡«ðŸ‡·' };

  function parseCriteria(str) {
    return str.split(',').map(s=>s.trim()).filter(s=>s.includes(':')).reduce((a,p)=>{const[rawKey,...r]=p.split(':');const k=rawKey.trim().toLowerCase();const v=r.join(':').trim().toLowerCase();if(k&&v)a[k]=v;return a},{ });
  }

  function filterData(data, criteria) {
    return data.filter(item=>Object.entries(criteria).every(([k,v])=>{
      switch(k) {
        case 'artist': return item.artist.toLowerCase().includes(v);
        case 'title':  return item.title.toLowerCase().includes(v);
        case 'release':return item.release.toLowerCase().includes(v);
        case 'tags':   return item.tags.some(t=>t.toLowerCase().includes(v));
        case 'note':   return (item.note||'').toLowerCase().includes(v);
        case 'language':return item.language && item.language.toLowerCase()===v;
        default: return false;
      }
    }));
  }

  fetch('{{ "/search.json" | url }}').then(r=>r.json()).then(data=>{
    const total=data.length;
    const input=document.getElementById('search');
    const clearBtn=document.getElementById('clear');
    const tbody=document.querySelector('#resultsTable tbody');
    const countEl=document.getElementById('count');
    let current=[];
    let sortKey='release', sortDir=-1;

    function updateCount(){countEl.textContent=`${current.length} / ${total} songs shown`;}
    function applySort(){current.sort((a,b)=>{let av=a[sortKey],bv=b[sortKey];if(sortKey==='release'){av=new Date(av);bv=new Date(bv);}else{av=String(av).toLowerCase();bv=String(bv).toLowerCase();}return(av<bv?-1:av>bv?1:0)*sortDir;});}
    function render(){
      if(!current.length){tbody.innerHTML='<tr><td colspan="6" style="text-align:center;">No matches</td></tr>';updateCount();return;}      
      tbody.innerHTML=current.map(item=>`<tr>
        <td><span class="clickable" data-field="artist" data-term="${item.artist}">${item.artist}</span></td>
        <td>${item.title}</td>
        <td style="white-space: nowrap;">${item.release}</td>
        <td>${item.tags.map(t=>`<span class="clickable" data-field="tags" data-term="${t}">#${t}</span>`).join(' ')}</td>
        <td>${item.note||'N/A'}</td>
        <td>${item.language?`<span class="clickable" data-field="language" data-term="${item.language}">${item.language}${langEmoji[item.language]||''}</span>`:''}</td>
      </tr>`).join('');
      updateCount();
    }

    function doSearch(){const crit=parseCriteria(input.value);current=Object.keys(crit).length?filterData(data,crit):data.slice().sort((a,b)=>new Date(b.release)-new Date(a.release));applySort();render();}

    // init
    doSearch();
    input.addEventListener('input',doSearch);
    clearBtn.addEventListener('click',()=>{input.value='';doSearch();input.focus();});

    document.querySelectorAll('th.sortable').forEach(th=>{
      th.addEventListener('click',()=>{
        const key=th.dataset.key;
        if(sortKey===key){sortDir*=-1;}else{sortKey=key;sortDir=1;}
        document.querySelectorAll('th.sortable').forEach(h=>h.style.fontWeight='normal');
        th.style.fontWeight='bold';
        applySort();render();
      });
    });

    tbody.addEventListener('click',e=>{
      if(e.target.classList.contains('clickable')){
        const f=e.target.dataset.field, t=e.target.dataset.term;
        const parts=input.value.split(',').map(s=>s.trim()).filter(s=>s);
        const filtered=parts.filter(p=>!p.toLowerCase().startsWith(f+':'));
        filtered.push(`${f}:${t}`);
        input.value=filtered.join(', ');
        doSearch();
      }
    });

    // back to top
    const btn=document.getElementById('backToTop');
    window.addEventListener('scroll',()=>{btn.style.display=window.scrollY>300?'block':'none';});
    btn.addEventListener('click',()=>window.scrollTo({top:0,behavior:'smooth'}));
  });
</script>
